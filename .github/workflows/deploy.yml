name: Deploy Sub-Store

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  # 构建和测试
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install workers dependencies
      run: |
        cd workers
        npm install

    - name: Type check workers
      run: |
        cd workers
        npm run type-check

    - name: Build workers
      run: |
        cd workers
        npm run build

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # 部署 Cloudflare Workers
  deploy-workers:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install workers dependencies
      run: cd workers && npm install

    # 配置 D1 数据库 - 使用 GitHub Secrets 动态注入配置
    - name: Configure D1 Database
      run: |
        cd workers
        echo "🗄️ 配置 D1 数据库..."

        # 检查必要的 secrets 是否存在
        if [ -z "${{ secrets.CF_D1_DATABASE_ID }}" ] || [ -z "${{ secrets.CF_D1_DATABASE_NAME }}" ]; then
          echo "❌ 缺少必要的数据库配置 secrets"
          echo "请确保已设置 CF_D1_DATABASE_ID 和 CF_D1_DATABASE_NAME"
          exit 1
        fi

        # 更新 wrangler.toml 中的数据库配置
        sed -i 's/YOUR_REAL_DATABASE_ID_HERE/${{ secrets.CF_D1_DATABASE_ID }}/' wrangler.toml
        sed -i 's/sub-store-db/${{ secrets.CF_D1_DATABASE_NAME }}/' wrangler.toml

        echo "✅ D1 数据库配置完成"
        echo "📋 当前配置："
        grep -A 5 "d1_databases" wrangler.toml || echo "配置未找到"

    - name: Run D1 Database Migrations
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        workingDirectory: workers
        command: d1 execute ${{ secrets.CF_D1_DATABASE_NAME }} --file=./schema.sql
      continue-on-error: true

    - name: Deploy to Cloudflare Workers
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        workingDirectory: workers
        command: deploy --compatibility-date=2024-01-15
        secrets: |
          ADMIN_TOKEN
          JWT_SECRET
      env:
        # 管理员认证配置
        ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        # JWT 密钥（可选，系统会自动生成）
        JWT_SECRET: ${{ secrets.JWT_SECRET }}

  # 部署前端到 Cloudflare Pages
  deploy-frontend:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend dependencies
      run: cd frontend && npm install

    - name: Build frontend
      run: cd frontend && npm run build

    - name: Deploy to Cloudflare Pages
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        workingDirectory: frontend
        command: pages deploy dist --project-name=sub-store-frontend

  # 健康检查
  health-check:
    needs: [deploy-workers, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Wait for deployment
      run: sleep 30

    - name: Health check - API
      run: |
        echo "检查 Workers API 部署状态..."
        curl -f https://sub-api.senma.io/health || echo "⚠️ API 健康检查失败，但继续执行"

    - name: Health check - Frontend
      run: |
        echo "检查前端部署状态..."
        curl -f https://sub.senma.io/ || echo "⚠️ 前端健康检查失败，但继续执行"

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Deployment successful!"
        echo "🌐 Frontend: https://sub.senma.io"
        echo "🔧 API: https://sub-api.senma.io"
        echo "📊 Architecture: Cloudflare Workers + D1 + Pages"
